principal {
    defvar
        entero ve;
        flotante vf, nm;
        caracter vc
        booleano vl;
        lista de entero pe, pe2;
        lista de flotante pf, pf2;
        lista de caracter pc, pc2;
        lista de booleano pl;
    enddefvar

    funcionA (entero a1, flotante a2, caracter a3)
    {
        defvar
            entero x1, x2 ;
        enddefvar

        funcionB (caracter b1, booleano b2)
        {
            defvar
                flotante xf, x2 ;
            enddefvar

            funcionC (booleano c1, entero c2)
            {
                defvar
                    flotante x1 ;
                enddefvar
                
                x1= 1.3 ;
                si (c2>10) entonces
                    c2= c2-1 ;
                sino
                    x1= 3.1 ;
            }

            xf= funcionC (verdadero, 10) ;
            x2= xf * (funcionC (falso, 1) - funcionC (verdadero, 23)) / 10.0;

            mientras (x2*funcionC(falso, 1))-xf<10.0)
                x2= x2*xf;
        } 

        funcionD (flotante d1)
        {
            defvar
                caracter dato ;
                entero valor ;
            enddefvar

            funcionE (caracter e1, caracter e2)
            {
                cout<<< "introduzca dos caracteres: ";
		cin >>> e1;
		cin >>> e2;
		if (e1==’a’)
			e1=’a’
		else if (e1==’b’)
			e1=’b’
		else
			e1=’c’
	    }

            imprimir "introduzca un valor entero: "; 
            leer valor ;
            si(d1>0.0) {
                defvar
                    entero dato ;
                enddefvar
                dato= 2 ;
                dato= valor*20/dato ;
            }
            sino {
                valor= valor * 100 ;
                d1= d1/1000.0 ;
            }
        } 

        si (?(pe<-20) == 20)
            ve = pe ;
        sino{
            pe= pe * pe2 ;
            pe= pe2 - pe ** 10 * (20/2000) ;
        }
    }
}
