%token SUBPROG_CLAVE CABECERA_PROGRAMA
%token TIPO_PRIM TIPO_LISTA
%token NOMB_IF NOMB_THEN NOMB_ELSE NOMB_WHILE NOMB_FOR NOMB_ENTRADA NOMB_SALIDA
%token LISTA_SENT
%token OP_TERN_PRIM_UN OP_TERN_SEG OP_BINARIO OP_UNARIO OP_UN_BIN
%token IDENTIFICADOR CADENA CONSTANTE PARIZQ PARDER CORIZQ CORDER LLAVIZQ LLAVDER
%token COMA PYC
%token ASIGN
%token MARCA_INI_DECLAR_VARIABLES MARCA_FIN_DECLAR_VARIABLES

%token bloque
%token Inicio_de_bloque Declar_de_variables_locales Declar_de_subprogs Sentencias Fin_de_bloque
%token Declar_subprog
%token Cabecera_subprograma
%token Variables_locales Cuerpo_declar_variables
%token lista_argumentos tipo
%token lista_expresiones expresion
%token lista_identificadores
%token Sentencia
%token sentencia_asignacion sentencia_if sentencia_while sentencia_for sentencia_entrada sentencia_salida llamada_proced
%token nomb_entrada nomb_salida lista_expresiones_o_cadena
%token constante

%start Programa

%%

Programa : CABECERA_PROGRAMA bloque;

bloque : Inicio_de_bloque Declar_de_variables_locales Delar_de_subprogs Sentencias Fin_de_bloque
;

Declar_de_subprogs : Declar_de_subprogs Declar_subprog
                   | 
;

Declar_subprog : Cabecera_subprograma bloque
               |
;

Declar_de_variables_locales : MARCA_INI_DECLAR_VARIABLES Variables_locales MARCA_FIN_DECLAR_VARIABLES
                            |
;

Cabecera_subprograma : SUBPROG_CLAVE IDENTIFICADOR PARIZQ lista_argumentos PARDER
;

Inicio_de_bloque : LLAVIZQ
;

Fin_de_bloque : LLAVDER
;

Variables_locales : Variables_locales Cuerpo_declar_variables
                  |
;

lista_argumentos : lista_argumentos COMA tipo IDENTIFICADOR
                 | tipo IDENTIFICADOR
                 |
;

lista_identificadores : lista_identificadores COMA IDENTIFICADOR
                      | IDENTIFICADOR
                      |
;

lista_expresiones : lista_expresiones COMA expresion
                  | expresion
                  |
;

Cuerpo_declar_variables : tipo lista_identificadores PYC
;

tipo : TIPO_PRIM
     | TIPO_LISTA TIPO_PRIM
;

Sentencias : Sentencia Sentencias
           | Sentencia
;

Sentencia : bloque
          | sentencia_asignacion
          | sentencia_if
          | sentencia_while
          | sentencia_for
          | sentencia_entrada
          | sentencia_salida
          | llamada_proced
          | IDENTIFICADOR LISTA_SENT
          |
;

llamada_proced : IDENTIFICADOR PARIZQ lista_expresiones PARDER PYC
;

sentencia_asignacion : IDENTIFICADOR ASIGN expresion PYC
;

sentencia_if : NOMB_IF PARIZQ expresion PARDER NOMB_THEN Sentencia
             : NOMB_IF PARIZQ expresion PARDER NOMB_THEN Sentencia NOMB_ELSE Sentencia
;

sentencia_while : NOMB_WHILE PARIZQ expresion PARDER Sentencia
;

sentencia_for : NOMB_FOR PARIZQ sentencia_asignacion expresion PYC Sentencia PARDER Sentencia
;

sentencia_entrada : nomb_entrada lista_identificadores PYC
;

sentencia_salida : nomb_salida lista_expresiones_o_cadena PYC
;

lista_expresiones_o_cadena : expresion COMA lista_expresiones_o_cadena 
                           | CADENA COMA lista_expresiones_o_cadena
                           | expresion
                           | CADENA
                           |
;

expresion : PARIZQ expresion PARDER
          | OP_UNARIO expresion
          | expresion OP_BINARIO expresion
          | OP_UN_BIN expresion
          | expresion OP_UN_BIN expresion
          | expresion OP_TERN_PRIM expresion OP_TERN_SEG expresion
          | IDENTIFICADOR
          | constante
;

constante_lista : CORCHIZQ lista_expresiones CORCHDER
;
%%

#include "lex.yy.c"
#include "error.y"

int main () {
    yyparse();
}
